# https://t.me/GooseChooseBot
import telebot
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import re
import logging

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '6695892448:AAEzb5VJX26xWpFrFOt_2BJOCAMDL5wBC7E'


# –ó–∞–º–µ–Ω–∏—Ç–µ 'ID_Roger_ver' –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @Roger_ver
your_chat_id = -1002119142548

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —à–∞–≥–æ–≤
states = {}
global_result = None
global_persent =None
global_link = None
global_photo = None
global_size = None
global_category = None
global_price = None
global_photo = None
bot = telebot.TeleBot(TOKEN)
user_info = {}

# Callback-–∫–æ–º–∞–Ω–¥—ã
CALCULATOR_COMMAND = 'calculator'
CHOOSE_CATEGORY_COMMAND = 'choose_category'
CHOOSE_KATEGORY_COMMAND = 'chose_kategory'

@bot.message_handler(commands=['start'])
def start_handler(message):
    # Replace 'https://t.me/buy_from_east/429' with your actual link
    link = "[–∑–¥–µ—Å—å](https://t.me/buy_from_east/429)"


    # Create ReplyKeyboardMarkup with one button and set resize_keyboard to True
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

    # Add buttons in two rows
    buttons = [
        [InlineKeyboardButton("üëü –ù–∞–ª–∏—á–∏–µ –≤ –ú–æ—Å–∫–≤–µ üëú"), InlineKeyboardButton("üõçÔ∏è–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='order')],
        [InlineKeyboardButton("‚ÑπÔ∏è FAQ", callback_data='faq'), InlineKeyboardButton("üí¥ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω", callback_data=CALCULATOR_COMMAND)],
    ]

    # Add buttons to the keyboard
    keyboard.add(*[button for row in buttons for button in row])

    # Create Markdown-formatted message
    
    markdown_message = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, **{message.from_user.first_name}** –≤ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ **GooseChoose!** üòâ\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –≤—ã–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å **–õ–Æ–ë–´–•** –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "1Ô∏è‚É£ POIZON (DEWU)\n2Ô∏è‚É£ Taobao.com\n3Ô∏è‚É£ Tmall –∏ –¥—Ä—É–≥–∏–µ.\n\n"
        f"–¢–∞–∫–∂–µ, —É –Ω–∞—Å –µ—Å—Ç—å **–∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ —Å—É–º–∫–∏ –≤ –Ω–∞–ª–∏—á–∏–∏** –≤ –ú–æ—Å–∫–≤–µ. "
        
        "**–í–Ω–∏–º–∞–Ω–∏–µ!** –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –∏ –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è **—Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–µ –∏–ª–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ **[goosechooseshop](https://t.me/GooseChooseShop)"
    )

    # Send Markdown message with keyboard
    bot.send_message(
        message.chat.id,
        markdown_message,
        parse_mode="Markdown",  # Specify that Markdown formatting is used
        reply_markup=keyboard,
    )

@bot.message_handler(func=lambda message: message.text == 'üëü –ù–∞–ª–∏—á–∏–µ –≤ –ú–æ—Å–∫–≤–µ üëú')
def faq_handler(message):
    try:
    # Handle the "‚ÑπÔ∏è FAQ" button
        faq_text = (
            "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –í—ã –º–æ–∂–µ—Ç–µ [–∑–¥–µ—Å—å](https://t.me/buy_from_east/429)"
            
        )
        
        

        # Send the FAQ message with hyperlinks
        bot.send_message(
            message.chat.id,
            faq_text,
            parse_mode="Markdown",
        )
    except Exception as e:
        print(f"Error in faq_order_callback: {e}")



# –∫–Ω–æ–ø–∫–∞ faq
@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è FAQ')
def faq_handler(message):
    try:
    # Handle the "‚ÑπÔ∏è FAQ" button
        faq_text = (
            "üíª –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:[GooseChooseShop](https://t.me/GooseChooseShop) ‚ÑπÔ∏è\n \n"
            "- –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑? [–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è](https://teletype.in/@goosechoose/lnnmnLOfUtE)\n"
            "- –ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞? [–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è](https://teletype.in/@goosechoose/Ua6HLvPolDx)\n"
            "- –ö–∞–∫ —Å–∫–∞—á–∞—Ç—å –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Poizon? [–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è](https://teletype.in/@goosechoose/v4EwmwMRLlm)\n \n"
            "- –î–æ—Å—Ç–∞–≤–∫–∞: [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è](https://teletype.in/@goosechoose/H8w4oQDHCF1)\n \n"
            "-  [–û—Ç–∑—ã–≤—ã:](https://t.me/goose_choose_feedback) -\n \n"
            "  –°–∫–∞—á–∞—Ç—å Poizon ‚úÖ\n \n" 
            "- [–î–ª—è IOS](https://apps.apple.com/ru/app/%E5%BE%97%E7%89%A9-%E6%9C%89%E6%AF%92%E7%9A%84%E8%BF%90%E5%8A%A8-%E6%BD%AE%E6%B5%81-%E5%A5%BD%E7%89%A9/id1012871328)  \n \n"
            "- [–î–ª—è Android](https://m.anxinapk.com/rj/12201303.html) \n \n" 
        )
        
        # Creating InlineKeyboardMarkup for the "FAQ" message
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å", url='https://t.me/GooseChooseShop '),
            
        )

        # Send the FAQ message with hyperlinks
        bot.send_message(
            message.chat.id,
            faq_text,
            reply_markup=keyboard,
            parse_mode="Markdown",
        )
    except Exception as e:
        print(f"Error in faq_order_callback: {e}")



@bot.callback_query_handler(func=lambda call: call.data == 'order')
def order_handler(call):
    try:
        logging.debug("Debugging information")
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue_order1'),
            InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data='close_order')
        )
        link = "<a href='https://teletype.in/@goosechoose/lnnmnLOfUtE'>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π</a>"

        bot.send_message(
        call.message.chat.id,
        f"–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π —Ç–æ–≤–∞—Ä–∞, <b>–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å {link} –ø–æ Poizon</b>\n"
        "–ï—Å–ª–∏ —É–∂–µ –∑–Ω–∞–∫–æ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâ",
        parse_mode="HTML",
        reply_markup=keyboard,
    )
    except Exception as e:
        print(f"Error in oformit_order_callback: {e}")

# –ø–æ –∏–º–µ–Ω–∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ 
@bot.message_handler(func=lambda message: message.text == 'üõçÔ∏è–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
def order_button_handler(message):
    try:
        logging.debug("Debugging information")
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue_order1'),
            InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data='close_order')
        )
        link = "<a href='https://teletype.in/@goosechoose/lnnmnLOfUtE'>–û–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è</a>"

        bot.send_message(
            message.chat.id,
            "–ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π\n"
            f"{link}\n",
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    except Exception as e:
        print(f"Error in order_button_handler: {e}")

# @bot.callback_query_handler(func=lambda call: call.data == 'close_order')
# def order_handler(call):
#     try:
#         link = "[–∑–¥–µ—Å—å](https://t.me/buy_from_east/429)"
#         link1 = "[goosechooseshop](https://t.me/GooseChooseShop)"

#         # Create ReplyKeyboardMarkup with one button and set resize_keyboard to True
#         keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

#         # Add buttons in two rows
#         buttons = [
#             [InlineKeyboardButton("üëü –ù–∞–ª–∏—á–∏–µ –≤ –ú–æ—Å–∫–≤–µ üëú", url='https://t.me/buy_from_east/429'), InlineKeyboardButton("üõçÔ∏è–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='order')],
#             [InlineKeyboardButton("‚ÑπÔ∏è FAQ", callback_data='faq'), InlineKeyboardButton("üí¥ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω", callback_data=CALCULATOR_COMMAND)],
#         ]

#         # Add buttons to the keyboard
#         keyboard.add(*[button for row in buttons for button in row])

#         # Create Markdown-formatted message
#         markdown_message = (
#             f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name} –≤ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ GooseChoose! üòâ\n"
#             f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –≤—ã–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –õ–Æ–ë–´–• –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
#             "1Ô∏è‚É£ POIZON (DEWU)\n 2Ô∏è‚É£ Taobao.com\n 3Ô∏è‚É£ Tmall –∏ –¥—Ä—É–≥–∏–µ.\n\n"
#             f"–¢–∞–∫–∂–µ, —É –Ω–∞—Å –µ—Å—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ —Å—É–º–∫–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ –≤ –ú–æ—Å–∫–≤–µ. "
#             f"–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –í—ã –º–æ–∂–µ—Ç–µ {link}\n"
#             "**–í–Ω–∏–º–∞–Ω–∏–µ!** –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –∏ –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è **—Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–µ –∏–ª–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞** {link1}"
#         )

#         # Send Markdown message with keyboard
#         bot.send_message(
#             markdown_message,
#             parse_mode="Markdown",  # Specify that Markdown formatting is used
#             reply_markup=keyboard,
#         )
       
#     except Exception as e:
#             print(f"Error in order_button_handler: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'close_order')
def close_button_handler(callback_query):
    try:
        print("ghgdjhgfdhjg")
        link = "[–∑–¥–µ—Å—å](https://t.me/buy_from_east/429)"
        link1 = "[goosechooseshop](https://t.me/GooseChooseShop)"
       
        # Create ReplyKeyboardMarkup with one button and set resize_keyboard to True
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

        # Add buttons in two rows
        buttons = [
            [InlineKeyboardButton("üëü –ù–∞–ª–∏—á–∏–µ –≤ –ú–æ—Å–∫–≤–µ üëú", url='https://t.me/buy_from_east/429'), InlineKeyboardButton("üõçÔ∏è–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='order')],
            [InlineKeyboardButton("‚ÑπÔ∏è FAQ", callback_data='faq'), InlineKeyboardButton("üí¥ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω", callback_data=CALCULATOR_COMMAND)],
        ]

        # Add buttons to the keyboard
        keyboard.add(*[button for row in buttons for button in row])

        # Create Markdown-formatted message
        markdown_message = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback_query.from_user.first_name} –≤ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ GooseChoose! üòâ\n"
            f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –≤—ã–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –õ–Æ–ë–´–• –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "1Ô∏è‚É£ POIZON (DEWU)\n 2Ô∏è‚É£ Taobao.com\n 3Ô∏è‚É£ Tmall –∏ –¥—Ä—É–≥–∏–µ.\n\n"
            f"–¢–∞–∫–∂–µ, —É –Ω–∞—Å –µ—Å—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ —Å—É–º–∫–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ –≤ –ú–æ—Å–∫–≤–µ. "
            f"–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –í—ã –º–æ–∂–µ—Ç–µ {link}\n"
            "**–í–Ω–∏–º–∞–Ω–∏–µ!** –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –∏ –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è **—Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–µ –∏–ª–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞** {link1}"
        )

        # Send Markdown message with keyboard
        bot.send_message(
            callback_query.message.chat.id,
            markdown_message,
            parse_mode="Markdown",  # Specify that Markdown formatting is used
            reply_markup=keyboard,
        )
       
    except Exception as e:
        print(f"Error in close_button_handler: {e}")

        
# @bot.message_handler(func=lambda message: message.text == '–ó–∞–∫—Ä—ã—Ç—å')
# def order_button_handler(message):
#     try:
#         link = "[–∑–¥–µ—Å—å](https://t.me/buy_from_east/429)"
#         link1 = "[goosechooseshop](https://t.me/GooseChooseShop)"

#         # Create ReplyKeyboardMarkup with one button and set resize_keyboard to True
#         keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

#         # Add buttons in two rows
#         buttons = [
#             [InlineKeyboardButton("üëü –ù–∞–ª–∏—á–∏–µ –≤ –ú–æ—Å–∫–≤–µ üëú", url='https://t.me/buy_from_east/429'), InlineKeyboardButton("üõçÔ∏è–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='order')],
#             [InlineKeyboardButton("‚ÑπÔ∏è FAQ", callback_data='faq'), InlineKeyboardButton("üí¥ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω", callback_data=CALCULATOR_COMMAND)],
#         ]

#         # Add buttons to the keyboard
#         keyboard.add(*[button for row in buttons for button in row])

#         # Create Markdown-formatted message
#         markdown_message = (
#             f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name} –≤ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ GooseChoose! üòâ\n"
#             f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –≤—ã–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –õ–Æ–ë–´–• –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
#             "1Ô∏è‚É£ POIZON (DEWU)\n 2Ô∏è‚É£ Taobao.com\n 3Ô∏è‚É£ Tmall –∏ –¥—Ä—É–≥–∏–µ.\n\n"
#             f"–¢–∞–∫–∂–µ, —É –Ω–∞—Å –µ—Å—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ —Å—É–º–∫–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ –≤ –ú–æ—Å–∫–≤–µ. "
#             f"–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –í—ã –º–æ–∂–µ—Ç–µ {link}\n"
#             "**–í–Ω–∏–º–∞–Ω–∏–µ!** –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –∏ –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è **—Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–µ –∏–ª–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞** {link1}"
#         )

#         # Send Markdown message with keyboard
#         bot.send_message(
#             message.chat.id,
#             markdown_message,
#             parse_mode="Markdown",  # Specify that Markdown formatting is used
#             reply_markup=keyboard,
#         )
       
#     except Exception as e:
#         print(f"Error in order_button_handler: {e}")
# # # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞

@bot.callback_query_handler(func=lambda call: call.data == 'continue_order1')
def continue_order1_callback(call):
    try:
        keyboard = InlineKeyboardMarkup(row_width=1)
        categories = ["–û–±—É–≤—å", "–§—É—Ç–±–æ–ª–∫–∏ —à–æ—Ä—Ç—ã", "–®—Ç–∞–Ω—ã/–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", "–°—É–º–∫–∏", "–î—É—Ö–∏/—á–∞—Å—ã", "–ù–æ—Å–∫–∏/–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ"]
        buttons = [InlineKeyboardButton(f"{kategory} ({index + 1})", callback_data=f"kategory_{index + 1}") for index, kategory in enumerate(categories)]
        keyboard.add(*buttons)

        bot.send_message(
            call.message.chat.id,
            "–ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–æ–≤–∞—Ä?",
            reply_markup=keyboard,
        )
    except Exception as e:
        print(f"Error in continue_order1_callback: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('kategory_'))
def choose_category_callback(call):
    try:
        # Extracting the selected category number
        category_number = int(call.data.split('_')[1])

        # Update the user's state to indicate the chosen category
        states[call.from_user.id] = f"{CHOOSE_CATEGORY_COMMAND}_{category_number}"

        # Now, ask the user to input the price
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ ¬•:")
    except Exception as e:
        print(f"Error in choose_category_callback: {e}")



@bot.message_handler(func=lambda message: states.get(message.from_user.id, '').startswith(f'{CHOOSE_CATEGORY_COMMAND}_'))
def handle_price_input(message):
    try:
        global global_category
        global global_result
        global global_persent
        global global_price
        print("Handling price input...")
        print(f"Message text: {message.text}")
        print(f"Current state for user {message.from_user.id}: {states}")

        # Extracting the state for the user
        user_state = states.get(message.from_user.id)

        # Check if the state has the expected format
        if not user_state.startswith(f"{CHOOSE_CATEGORY_COMMAND}_"):
            raise ValueError("Invalid state format")

        # Convert the input to an integer
        price = float(message.text.replace(" ", ""))

        # Ensure that the input is a non-negative number
        if price < 0:
            raise ValueError("Negative number not allowed")

        if price.is_integer():
            price = int(price)

        category_match = re.match(rf"{CHOOSE_CATEGORY_COMMAND}_(\d+)", user_state)
        if not category_match:
            raise ValueError("Invalid state format - category number not found")

        category_number = int(category_match.group(1))

        category_mapping = {
            1: "–û–±—É–≤—å",
            2: "–§—É—Ç–±–æ–ª–∫–∏/—à–æ—Ä—Ç—ã",
            3: "–®—Ç–∞–Ω—ã/–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞",
            4: "–°—É–º–∫–∏",
            5: "–î—É—Ö–∏/—á–∞—Å—ã",
            6: "–ù–æ—Å–∫–∏/–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ",
        }
        selected_category = category_mapping.get(category_number, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        global_category = selected_category
        print(f"Selected category: {selected_category}")

        # Defining parameters for the formula based on the category
        if selected_category == "–û–±—É–≤—å":
            print(f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è {selected_category}")
            formula_params = [800, 1100, 999]
        elif selected_category == "–§—É—Ç–±–æ–ª–∫–∏/—à–æ—Ä—Ç—ã":
            print(f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è {selected_category}")
            formula_params = [450, 400, 999]
        elif selected_category == "–®—Ç–∞–Ω—ã/–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞":
            print(f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è {selected_category}")
            formula_params = [850, 950, 999]
        elif selected_category == "–°—É–º–∫–∏":
            print(f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è {selected_category}")
            formula_params = [500, 700, 999]
        elif selected_category == "–î—É—Ö–∏/—á–∞—Å—ã":
            print(f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è {selected_category}")
            formula_params = [400, 500, 999]
        else:
            formula_params = [300, 400, 999]  # Replace with parameters for other categories

        result = (price + (price / 100) * 5) * 13.7 + sum(formula_params)
        global_price =price
        rounded_result = round(result, 1)
        global_result = rounded_result
        procent = round((price / 100) * 5, 1)
        global_persent = procent

         # Ask the user to send a link to the product
        bot.send_message(
            message.chat.id,
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:",
        )

        # Update the user state to indicate that you're waiting for a link
        states[message.from_user.id] = 'waiting_for_link'

        # bot.send_message(your_chat_id, text="your_message_text", parse_mode="HTML")
        # keyboard = InlineKeyboardMarkup(row_width=1)
        # keyboard.add(
        #     InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='oformit_order'),
        # )

        # bot.send_message(
        #     message.chat.id,
        #     f"<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
        #     f"{message.text} ¬• = {rounded_result} ‚ÇΩ\n\n"
        #     f"<b>üßÆ –§–æ—Ä–º—É–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        #     f"{selected_category}:\n"
        #     f"{message.text} +{procent})*13.7 + (800 + 1100 + 999) = {rounded_result} ‚ÇΩ \n"
        #     f"(–¶–µ–Ω–∞ + 5%) * –∫—É—Ä—Å + (–¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—Ç–∞—é + –ö–∏—Ç–∞–π-–ú–æ—Å–∫–≤–∞ —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π + –∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞) üòé\n\n"
        #     f"<b>–ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?</b> üòé\n"
        #     f"–¢–µ–±–µ —Å—é–¥–∞: @GooseChooseShop\n\n"
        #     "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞, —Å—Å—ã–ª–∫—É –∏ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä—É ü§©\n\n"
        #     "‚ÄºÔ∏è –í—Å–µ –∑–∞–∫–∞–∑—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ @GooseChooseShop ‚ÄºÔ∏è",
        #     parse_mode="HTML",
        #     reply_markup=keyboard,
        # )
        # bot.send_message(
        #     your_chat_id,
        #     f"<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}:</b>\n"
        #     f"{message.text} ¬• = {rounded_result} ‚ÇΩ\n\n"
        #     f"<b>üßÆ –§–æ—Ä–º—É–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        #     f"{selected_category}:\n"
        #     f"{message.text} +{procent})*13.7 + (800 + 1100 + 999) = {rounded_result} ‚ÇΩ \n"
        #     f"(–¶–µ–Ω–∞ + 5%) * –∫—É—Ä—Å + (–¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—Ç–∞—é + –ö–∏—Ç–∞–π-–ú–æ—Å–∫–≤–∞ —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π + –∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞) üòé\n\n"
        #     f"<b>–ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?</b> üòé\n"
        #     f"–¢–µ–±–µ —Å—é–¥–∞: @GooseChooseShop\n\n"
        #     "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞, —Å—Å—ã–ª–∫—É –∏ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä—É ü§©\n\n"
        #     "‚ÄºÔ∏è –í—Å–µ –∑–∞–∫–∞–∑—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ @GooseChooseShop ‚ÄºÔ∏è",
        #     parse_mode="HTML"
        # )

    except ValueError as e:
        print(f"Error: {e}")
        # If the input is not a valid number, send an error message
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


@bot.message_handler(func=lambda message: states.get(message.from_user.id) == 'waiting_for_link')
def handle_link_input(message):
    global global_link
    try:
        
        # Extract link from the message text using regular expression
        link_pattern = re.compile(r'https?://\S+|www\.\S+')
        match = link_pattern.search(message.text)

      
        if match:
            # Get the matched link
            product_link = match.group()
            global_link = product_link
            # Process the product link as needed
            print("global_link")
            # For now, just send a confirmation message
            bot.send_message(
                message.chat.id,
                f"–°–ø–∞—Å–∏–±–æ! üìè –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ ",
            )

            # Clearing the user state
            states[message.from_user.id] = 'waiting_for_size'
        else:
            bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.",
            )

    except Exception as e:
        print(f"Error in handle_link_input: {e}")
        # If there's an error, handle it appropriately (e.g., log it) without sending an error message to the user
        # You can customize this part based on your needs
        pass



@bot.message_handler(func=lambda message: states.get(message.from_user.id) == 'waiting_for_size')
def handle_size_input(message):
    global global_size
    try:
        
        # Extract the size from the message text
        global_size = message.text

        # Store the size in the dictionary
        user_info[message.from_user.id] = {'size': global_size}

        # Process the size as needed
        # For now, you can include it in the final message
        bot.send_message(
            message.chat.id,
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–º–µ—Ä! –¢–æ–≤–∞—Ä —Å —Ä–∞–∑–º–µ—Ä–æ–º {global_size} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ"
        )

        # You can continue with the rest of your logic here

        # Clear the user state
        states[message.from_user.id] = 'waiting_for_photo'

    except Exception as e:
        print(f"Error in handle_size_input: {e}")
        # Handle errors as needed
        pass


@bot.message_handler(func=lambda message: states.get(message.from_user.id) == 'waiting_for_photo', content_types=['photo'])
def handle_photo_input(message):
    global global_result
    global global_category
    global global_persent
    global global_link
    global global_price
    global global_photo
    global global_size
    try:
        print("{global_category}")
        # Assuming you want to process the first photo sent by the user
        photo_file_id = message.photo[0].file_id

        global_photo = photo_file_id

        # Process the photo file ID as needed
        # For now, just send a confirmation message with the photo
       
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='prodoljit'),
            
        )
        bot.send_photo(
            your_chat_id,
            global_photo,
            caption=f"–§–æ—Ç–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º"
        )

        bot.send_message(
            
            message.chat.id,
            global_link
            
        )
        bot.send_message(
            
            message.chat.id,
            f"<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            f"{global_price} ¬• = {global_result} ‚ÇΩ\n\n || —Ä–∞–∑–º–µ—Ä {global_size}\n\n"
             f"‚ÑπÔ∏è <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:</b>\n"
            f"- –í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞\n"
            f"- –ö–æ–º–∏—Å—Å–∏—é\n"
            f"- –î–æ—Å—Ç–∞–≤–∫—É –ø–æ –ö–∏—Ç–∞—é\n"
            f"- –î–æ—Å—Ç–∞–≤–∫—É –ö–∏—Ç–∞–π - –ú–æ—Å–∫–≤–∞\n"
            f"- –°—Ç—Ä–∞—Ö–æ–≤–∫—É \n\n"
            f"üßÆ <b>–§–æ—Ä–º—É–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
            f"{global_category}:\n"
            f"({global_price} +{global_persent})*13.7 + (800 + 1100 + 999) = {global_result} ‚ÇΩ \n"
            f"(–¶–µ–Ω–∞ + 5%) * –∫—É—Ä—Å + (–¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—Ç–∞—é + –ö–∏—Ç–∞–π-–ú–æ—Å–∫–≤–∞ + –∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞) üòé\n\n"
            f"–ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å? üòé\n"
            f"–¢–µ–±–µ —Å—é–¥–∞: @GooseChooseShop\n\n"
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞, —Å—Å—ã–ª–∫—É –∏ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä—É ü§©\n\n"
            "‚ÄºÔ∏è –í—Å–µ –∑–∞–∫–∞–∑—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ @GooseChooseShop ‚ÄºÔ∏è",
            parse_mode="HTML",
            reply_markup=keyboard,
        )

      


        # Clearing the user state
        states[message.from_user.id] = 'waiting_for_price_in_yen'
    except Exception as e:
        print(f"Error in handle_photo_input: {e}")
        # If there's an error, handle it appropriately (e.g., log it) without sending an error message to the user
        # You can customize this part based on your needs
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'prodoljit')
def handle_continue_callback(call):
    try:
        user_id = call.from_user.id

        # Send a message asking for the Full Name (FIO)
        bot.send_message(user_id, "üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à–µ –§–ò–û")

        # Update user state to 'waiting_for_fio'
        states[user_id] = 'waiting_for_fio'

    except Exception as e:
        print(f"Error in handle_continue_callback: {e}")
        # Handle errors as needed
        pass

# Add a new state for handling FIO input
@bot.message_handler(func=lambda message: states.get(message.from_user.id) == 'waiting_for_fio')
def handle_fio_input(message):
    try:
        # Assume FIO is sent as a single message
        fio = message.text

        # Process FIO as needed
        # For example, store it in user_info dictionary
        user_info[message.from_user.id]['fio'] = fio

        # Send a message asking for the phone number
        bot.send_message(
            message.chat.id,
            "üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ +",
        )


        # Update user state to 'waiting_for_phone'
        states[message.from_user.id] = 'waiting_for_phone'

    except Exception as e:
        print(f"Error in handle_fio_input: {e}")
        # Handle errors as needed
        pass

# Add a new state for handling phone input
@bot.message_handler(func=lambda message: states.get(message.from_user.id) == 'waiting_for_phone')
def handle_phone_input(message):
    global global_result
    global global_category
    global global_persent
    global global_link
    global global_price
    global global_photo
    try:
        # Assume the phone number is sent as a single message
        phone_number = message.text

        # Process the phone number as needed
        # For example, store it in user_info dictionary
        user_info[message.from_user.id]['phone'] = phone_number

        # Send a confirmation message
        bot.send_message(
            message.chat.id,
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @GooseChooseShop. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
        )

        # Send the collected information to the manager/administrator
      
        user_data = user_info[message.from_user.id]
        bot.send_message(
            your_chat_id,
            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}:\n \n"
            f"{global_link} "
            f"{global_price} ¬•  "
    
            f"{global_result} –† \n \n"

            f"–§–ò–û: {user_data['fio']}\n \n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone']}"
            
            # Add more details as needed
        )

        # If you want to offer the option to add another item, you can include that here
        bot.send_message(
            message.chat.id,
            "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @GooseChooseShop",
        )

        # Clear the state
        states.pop(message.from_user.id, None)

    except Exception as e:
        print(f"Error in handle_phone_input: {e}")
        # Handle errors as needed
        pass




class PriceCalculator:
    def __init__(self, bot, states):
        self.bot = bot
        self.states = states
        self.global_result = None
        self.global_category = None

    def send_category_selection_message(self, chat_id):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        categories = ["–û–±—É–≤—å", "–§—É—Ç–±–æ–ª–∫–∏/—à–æ—Ä—Ç—ã", "–®—Ç–∞–Ω—ã/–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", "–°—É–º–∫–∏", "–î—É—Ö–∏/—á–∞—Å—ã", "–ù–æ—Å–∫–∏/–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ"]
        buttons = [types.InlineKeyboardButton(f"{category} ({index + 1})", callback_data=f"category_{index + 1}") for index, category in enumerate(categories)]
        keyboard.add(*buttons)

        self.bot.send_message(
            chat_id,
            "–ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–æ–≤–∞—Ä?",
            reply_markup=keyboard,
        )

    def handle_category_selection(self, call):
        category_number = int(call.data.split("_")[1])
        print("blabla")
        category_mapping = {
            1: "–û–±—É–≤—å",
            2: "–§—É—Ç–±–æ–ª–∫–∏/—à–æ—Ä—Ç—ã",
            3: "–®—Ç–∞–Ω—ã/–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞",
            4: "–°—É–º–∫–∏",
            5: "–î—É—Ö–∏/—á–∞—Å—ã",
            6: "–ù–æ—Å–∫–∏/–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ",
        }
        selected_category = category_mapping.get(category_number, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.states[call.from_user.id] = f"CHOOSE_CATEGORY_{category_number}"
        print(f"Updated state for user {call.from_user.id}: {self.states}")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = f"images/{re.sub('[^A-Za-z0-9–ê-–Ø–∞-—è]+', '_', selected_category.lower())}.jpg"
        self.global_category =  selected_category
        with open(image_path, "rb") as photo:
            self.bot.send_photo(
                call.message.chat.id,
                photo,
                caption=f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}\n üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ü–µ–Ω—É –∑–∞ –ø–æ–∑–∏—Ü–∏—é –≤ ¬• –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞",
            )

    def handle_price_input(self, message):
        try:
            print("Handling price input...")
            print(f"Message text: {message.text}")
            print(f"Current state for user {message.from_user.id}: {self.states}")

            # Extracting the state for the user
            user_state = self.states.get(message.from_user.id)

            # Check if the state has the expected format
            if not user_state.startswith("CHOOSE_CATEGORY_"):
                raise ValueError("Invalid state format")

            # Convert the input to a float
            price = float(message.text.replace(" ", ""))
            
            # Ensure that the input is a non-negative number
            if price < 0:
                raise ValueError("Negative number not allowed")

            category_match = re.match(r"CHOOSE_CATEGORY_(\d+)", user_state)
            if not category_match:
                raise ValueError("Invalid state format - category number not found")

            category_number = int(category_match.group(1))

            # Defining parameters for the formula based on the category
            formula_params = {
                1: "–û–±—É–≤—å",
                2: "–§—É—Ç–±–æ–ª–∫–∏ —à–æ—Ä—Ç—ã",
                3: "–®—Ç–∞–Ω—ã/–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞",
                4: "–°—É–º–∫–∏",
                5: "–î—É—Ö–∏/—á–∞—Å—ã",
                6: "–ù–æ—Å–∫–∏/–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ"
            }

            selected_category = formula_params.get(category_number, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            print(f"Selected category: {selected_category}")

            if selected_category == "–û–±—É–≤—å":
                formula_params = [800, 1100, 999]
            elif selected_category == "–§—É—Ç–±–æ–ª–∫–∏/—à–æ—Ä—Ç—ã":
                formula_params = [450, 400, 999]
            elif selected_category == "–®—Ç–∞–Ω—ã/–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞":
                formula_params = [850, 950, 999]
            elif selected_category == "–°—É–º–∫–∏":
                formula_params = [500, 700, 999]
            elif selected_category == "–î—É—Ö–∏/—á–∞—Å—ã":
                formula_params = [400, 500, 999]
            elif selected_category == "–ù–æ—Å–∫–∏/–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ":
                formula_params = [300, 400, 999]
            else:
                formula_params = [0, 0, 0]  # Replace with parameters for other categories

            # Assuming price is the input value provided by the user
            procent = round((price / 100) * 5 , 1)

            # Formula calculation
            result = (price + procent) * 13.7 + sum(formula_params)
            rounded_result = round(result, 1)

            # Display the result
            formatted_result = f"<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}:</b>\n\n" \
                            f" {message.text} ¬• = {rounded_result} ‚ÇΩ\n\n" \
                            f"<b>üßÆ –§–æ—Ä–º—É–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n" \
                            f"{selected_category}:\n" \
                            f"({message.text} + {procent})*13.7 + {formula_params[0]} + {formula_params[1]} + {formula_params[2]} = {rounded_result} ‚ÇΩ \n" \
                            f"(–¶–µ–Ω–∞ + 5%) * –∫—É—Ä—Å + (–¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—Ç–∞—é + –ö–∏—Ç–∞–π-–ú–æ—Å–∫–≤–∞ —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π + –∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞) üòé\n\n" \
                            f"<b>–ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?</b> üòé\n" \
                            f"–¢–µ–±–µ —Å—é–¥–∞: @GooseChooseShop\n\n" \
                            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞, —Å—Å—ã–ª–∫—É –∏ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä—É ü§©\n\n" \
                            "‚ÄºÔ∏è –í—Å–µ –∑–∞–∫–∞–∑—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ @GooseChooseShop ‚ÄºÔ∏è"

            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("üõçÔ∏è–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='order'),
            )

            self.bot.send_message(
                message.chat.id,
                formatted_result,
                parse_mode="HTML",
                reply_markup=keyboard,
)
            self.bot.send_message(
                your_chat_id,
                formatted_result,
                parse_mode="HTML",
                
)

        except ValueError as e:
            print(f"Error: {e}")
            # If the input is not a valid number, send an error message
            self.bot.send_message(message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. {e}")



# Create an instance of PriceCalculator
price_calculator = PriceCalculator(bot, states)

# Handlers
@bot.message_handler(func=lambda message: message.text == "üí¥ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω")
def calculator_handler(message):
    price_calculator.send_category_selection_message(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def category_handler(call):
    price_calculator.handle_category_selection(call)

@bot.message_handler(func=lambda message: states.get(message.from_user.id, "").startswith('CHOOSE_CATEGORY'))
def handle_price_input(message):
    price_calculator.handle_price_input(message)

# Run the bot
bot.polling(none_stop=True)

if __name__ == "__main__":
    bot.polling(none_stop=True)